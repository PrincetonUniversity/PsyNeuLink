[build-system]
requires = [
  "hatchling>=1.18",
  "hatch-vcs>=0.4",
  "hatch-requirements-txt>=0.4"
]
build-backend = "hatchling.build"

[project]
name = "psyneulink"
dynamic = ["version", "dependencies", "optional-dependencies"]
description = "A block modeling system for cognitive neuroscience"
readme = { file = "README.rst", content-type = "text/x-rst" }
requires-python = ">=3.8"
license = { file = "LICENSE.txt" }
authors = [
  { name = "Jonathan Cohen, Princeton University", email = "jdc@princeton.edu" }
]
keywords = ["cognitive modeling"]
classifiers = [
  "Development Status :: 3 - Alpha",
  "Intended Audience :: Developers",
  "Topic :: Software Development :: Build Tools",
  "License :: OSI Approved :: Apache Software License",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13"
]

[project.urls]
Homepage = "https://github.com/PrincetonUniversity/PsyNeuLink"

## Dependencies are loaded dynamically via hatch-requirements-txt

[tool.hatch.metadata.hooks.requirements_txt]
files = [
  "requirements.txt"
]

[tool.hatch.metadata.hooks.requirements_txt.optional-dependencies]
cuda = ["cuda_requirements.txt"]
dev = ["dev_requirements.txt"]
doc = ["doc_requirements.txt"]
tutorial = ["tutorial_requirements.txt"]

[tool.pytest.ini_options]
addopts = [
  "-s",
  "-vv",
  "-n", "auto",
  "--dist", "worksteal",
  "--benchmark-disable",
  "--benchmark-disable-gc",
  "--benchmark-warmup=on",
  "--benchmark-warmup-iterations=2",
  "--cov-config=pyproject.toml",
  "--ruff",
  "--strict-markers",
  "--strict-config",
  "--ignore=Scripts"
]
markers = [
  "stress: Long running tests, skipped by defaults",
  "autodiff_constructor",
  "acmisc",
  "accorrectness",
  "actime",
  "acidenticalness",
  "aclogging",
  "acnested",
  "composition: PsyNeuLink Composition tests",
  "llvm: Tests using LLVM runtime compiler",
  "llvm_not_implemented: Tests that should use LLVM runtime compiler but the functionality is not yet implemented",
  "cuda: Tests using LLVM runtime compiler and CUDA GPGPU backend",
  "control: Tests including control mechanism and/or control projection",
  "state_features: Tests for OptimizationControlMechanism state_features specifications",
  "pathways: Tests for pathway arg of Composition constructor and node Roles",
  "projection",
  "nested: Tests including nested compositions",
  "function: Tests of Function classes",
  "combination_function",
  "distance_function",
  "fitzHughNagumo_integrator_function",
  "identity_function",
  "integrator_function",
  "memory_function",
  "optimization_function",
  "stability_function",
  "transfer_function",
  "multirun: Tests running multiple execution IDs",
  "mechanism: Tests of Mechanism classes",
  "control_mechanism",
  "ddm_mechanism",
  "integrator_mechanism",
  "lca_mechanism",
  "objective_mechanism",
  "recurrent_transfer_mechanism",
  "transfer_mechanism",
  "mimo: Tests using multiple inputs and outputs",
  "model: Tests based on existing models",
  "pytorch: Tests using Torch"
]
required_plugins = [
  "pytest-benchmark",
  "pytest-cov",
  "pytest-helpers-namespace",
  "pytest-ruff",
  "pytest-xdist"
]
xfail_strict = true
filterwarnings = [
  "error::SyntaxWarning",
  "error:Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated.*",
  "error:Invalid escape sequence",
  "error:the matrix subclass is not the recommended way to represent matrices or deal with linear algebra",
  "error:Passing (type, 1) or '1type' as a synonym of type is deprecated",
  "error:A builtin ctypes object gave a PEP3118:RuntimeWarning",
  "error:Pickle, copy, and deepcopy support will be removed from itertools:DeprecationWarning",
  "error:Benchmark fixture was not used at all in this test!",
  "ignore:.*is not an MDF standard function, this is likely to produce an incompatible model.:UserWarning"
]

# Hatch versioning from VCS tags
[tool.hatch]
version.source = "vcs"
# version.tag-pattern = "v*"


# Ensure sdists include non-package resources formerly covered by MANIFEST.in
[tool.hatch.build]
hooks.vcs.version-file = "psyneulink/_version.py"
include = [
  "README.rst",
  "LICENSE.txt",
  "requirements.txt",
  "dev_requirements.txt",
  "doc_requirements.txt",
  "cuda_requirements.txt",
  "tutorial_requirements.txt",
  "docs/**",
  "tests/**",
  "tutorial/**",
  "psyneulink/library/models/results/*.json"
]

[tool.hatch.build.targets.wheel]
include = [
  "LICENSE.txt",
  "psyneulink/library/models/results/*.json"
]

[tool.coverage.run]
branch = true
concurrency = ["multiprocessing"]
source = ["psyneulink"]

[tool.coverage.report]
fail_under = 75
exclude_lines = [
  # Have to re-enable the standard pragma
  'pragma: no cover',

  # Don't complain about missing debug-only code:
  'def __repr__',
  'if self\\.debug',
  'if .*dump.* in .*debug_env:',
  'if .*compile.* in .*debug_env:',

  # Don't complain if tests don't hit defensive assertion code:
  'raise .*Error',
  'assert False.*',

   # Don't complain if non-runnable code isn't run:
  'if 0:',
  'if __name__ == .__main__.'
]

[tool.ruff.lint]
exclude = [
  ".git",
  "__pytest__",
  "Scripts",
  "bin",
  "psyneulink/core/rpc/graph_pb2.py"
]
select = [
  "E", # pycodestyle errors
  "D", # pydocstyle errors
]
extend-select = [
  # "B",           # flake8-bugbear
  # "I",           # isort
  # "ARG",         # flake8-unused-arguments
  # "C4",          # flake8-comprehensions
  # "EM",          # flake8-errmsg
  # "ICN",         # flake8-import-conventions
  # "PGH",         # pygrep-hooks
  # "PIE",         # flake8-pie
  # "PL",          # pylint
  # "PT",          # flake8-pytest-style
  # "PTH",         # flake8-use-pathlib
  # "RET",         # flake8-return
  # "RUF",         # Ruff-specific
  # "SIM",         # flake8-simplify
  # "TID251",      # flake8-tidy-imports.banned-api
  # "T20",         # flake8-print
  # "UP",          # pyupgrade
  # "YTT",         # flake8-2020
]
ignore = [
  "PLR",    # Design related pylint codes
  "RUF012", # Would require a lot of ClassVar's
  "E501",   # line too long
  "E741",   # ambiguous variable name
  "E722",   # bare except
  "E721",   # comparing types with ==, rather than isinstance()
  "E402",   # module-import-not-at-top-of-file
  "E101",   # mixed-spaces-and-tabs
  "E713",   # not-in-test
  "E731",   # do not assign a lambda expression
  "E701",   # multiple-statements-on-one-line-colon
  "E703",   # useless-semicolon
  "E712",   # true-false-comparison

  # Indentation rules
  "E114", "E115", "E116",

  # Whitespace rules
  "E201", "E202", "E203", "E221", "E225", "E231", "E241", "E251", "E252",
  "E261", "E262", "E265",

  # Blank lines
  "E301", "E302", "E303", "E306",

  # Warnings
  "W605",

  "D100", # Missing docstring in public module
  "D101", # Missing docstring in public class
  "D102", # Missing docstring in public method
  "D103", # Missing docstring in public function
  "D104", # Missing docstring in public package
  "D105", # Missing docstring in magic method
  "D106", # Missing docstring in public nested class
  "D107", # Missing docstring in __init__
  "D200", # One-line docstring should fit on one line
  "D202", # No blank lines allowed after function docstring
  "D204", # 1 blank line required after class docstring
  "D205", # 1 blank line required between summary line and description
  "D207", # Docstring is under-indented
  "D208", # Docstring is over-indented
  "D301", # Use r""" if any backslashes in a docstring
  "D400", # First line should end with a period
  "D401", # First line should be in imperative mood
  "D402", # First line should not be the function's signature
  "D403", # First word of the first line should be properly capitalized
  "D412", # No blank lines allowed between a section header and its content
  "D413", # Missing blank line after last section
  "D414", # Section has no content
  "D415", # missing-terminal-punctuation
  "D212", # multi-line-summary-first-line
  "D416", # missing-section-name-colon
  "D214", # overindented-section
  "D417", # undocumented-param
  "D215", # overindented-section-underline
  "D407", # missing-dashed-underline-after-section
  "D406", # missing-new-line-after-section-name
  "D211", # blank-line-before-class
  "D411", # no-blank-line-before-section
  "D409", # mismatched-section-underline-length
  "D404", # docstring-starts-with-this
  "D300", # triple-single-quotes
  "D410", # no-blank-line-after-section
  "D405", # non-capitalized-section-name
  "D209", # new-line-after-last-paragraph
  "D210", # surrounding-whitespace
  "D201", # blank-line-before-function
  "D213", # multi-line-summary-second-line
  "D203", # incorrect-blank-line-before-class
]
