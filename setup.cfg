[bdist_wheel]
python-tag = py3

[metadata]
license_file = LICENSE.txt

[tool:pytest]
addopts =
    -s
    -vv
    -n auto
    --dist worksteal
    --benchmark-disable
    --benchmark-disable-gc
    --benchmark-warmup=on
    --benchmark-warmup-iterations=2
    --cov-config setup.cfg
    --pydocstyle
    --pycodestyle
    --strict-markers
    --strict-config
    --ignore=Scripts

markers =
	stress: Long running tests, skipped by defaults
	autodiff_constructor
	acmisc
	accorrectness
	actime
	acidenticalness
	aclogging
	acnested
	composition: PsyNeuLink Composition tests
	llvm: Tests using LLVM runtime compiler
	cuda: Tests using LLVM runtime compiler and CUDA GPGPU backend
	control: Tests including control mechanism and/or control projection
	state_features: Tests for OptimizationControlMechanism state_features specifications
	pathways: Tests for pathway arg of Composition constructor and node Roles
	projection
	nested: Tests including nested compositions
	function: Tests of Function classes
	combination_function
	distance_function
	fitzHughNagumo_integrator_function
	identity_function
	integrator_function
	memory_function
	optimization_function
	stability_function
	transfer_function
	multirun: Tests running multiple execution IDs
	mechanism: Tests of Mechanism classes
	control_mechanism
	ddm_mechanism
	integrator_mechanism
	lca_mechanism
	objective_mechanism
	recurrent_transfer_mechanism
	transfer_mechanism
	mimo: Tests using multiple inputs and outputs
	model: Tests based on existing models
	pytorch: Tests using Torch

# These are needed for test fixtures or default parameters
required_plugins = pytest-benchmark pytest-cov pytest-helpers-namespace pytest-pycodestyle pytest-pydocstyle pytest-xdist

xfail_strict = True

filterwarnings =
	error::SyntaxWarning
	error:Creating an ndarray from ragged nested sequences \(which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes\) is deprecated.*:numpy.VisibleDeprecationWarning
	error:Invalid escape sequence
	error:the matrix subclass is not the recommended way to represent matrices or deal with linear algebra
	error:Passing (type, 1) or '1type' as a synonym of type is deprecated
	error:A builtin ctypes object gave a PEP3118:RuntimeWarning

[pycodestyle]
# for code explanation see https://pep8.readthedocs.io/en/latest/intro.html#error-codes
ignore = E114,E115,E116,E121,E122,E123,E124,E125,E126,E127,E128,E129,E131,E201,E202,E203,E221,E225,E231,E241,E251,E252,E261,E262,E265,E301,E302,E303,E306,E501,E721,E722,E731,E741,W503,W504,W605
exclude = .git/*,Scripts/*,__pytest__/*,docs/*,bin/*

[pydocstyle]
# for code explanation see http://www.pydocstyle.org/en/latest/error_codes.html
add-ignore = D100,D101,D102,D103,D104,D105,D106,D107,D200,D202,D204,D205,D207,D208,D301,D400,D401,D402,D403,D412,D413,D414
match-dir = (?!Script)(?!bin)(?!docs).*

[coverage:run]
branch = True
concurrency = multiprocessing
source = psyneulink/

[coverage:report]
fail_under = 75

# Regexes for lines to exclude from consideration
exclude_lines =
    # Have to re-enable the standard pragma
    pragma: no cover

    # Don't complain about missing debug-only code:
    def __repr__
    if self\.debug
    if .*dump.* in .*debug_env:
    if .*compile.* in .*debug_env:

    # Don't complain if tests don't hit defensive assertion code:
    raise .*Error
    assert False.*

    # Don't complain if non-runnable code isn't run:
    if 0:
    if __name__ == .__main__.:

[versioneer]
VCS = git
style = pep440
versionfile_source = psyneulink/_version.py
versionfile_build = psyneulink/_version.py
tag_prefix = v
parentdir_prefix = psyneulink-
