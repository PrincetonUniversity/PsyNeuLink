name: 'Install local pnl package'
description: 'Install PsyNeulink dependencies and editable PNL package'
inputs:
  features:  # id of input
    description: 'PsyNeuLink features to install'
    required: true
    default: ''
outputs:
  wheel:
    description: 'Returns path to the built .whl package'
    value: ${{ steps.dist.outputs.wheel }}
  sdist:
    description: 'Returns path to the built .sdist package'
    value: ${{ steps.dist.outputs.sdist }}

runs:
  using: "composite"
  steps:
    - name: OS dependencies
      shell: bash
      env:
        RUNNER_OS: ${{ runner.os }}
        HOMEBREW_NO_AUTO_UPDATE: 1
      # Composited actions can't use step conditionals.
      run: |
        case "$RUNNER_OS" in
          macOS*) brew install graphviz ;;
          Linux*) sudo apt-get update && sudo apt-get install -y --no-install-recommends graphviz ;;
          Windows*) choco install --no-progress -y graphviz --version=2.38.0.20190211 ;;
          *) echo "Unsupported OS"; exit 1 ;;
        esac

    - name: Setup Python venv
      shell: bash
      run: |
        case "$RUNNER_OS" in
          macOS* | Linux*)
            export VIRTUAL_ENV='${{ runner.temp }}/_venv'; export PYTHON_LOC=$VIRTUAL_ENV/bin/ ;;
          Windows*)
            export VIRTUAL_ENV='${{ runner.temp }}\_venv'; export PYTHON_LOC=$VIRTUAL_ENV\\Scripts ;;
          *) echo "Unsupported OS"; exit 1 ;;
        esac
        python -m venv $VIRTUAL_ENV
        echo "VIRTUAL_ENV=$VIRTUAL_ENV" >> $GITHUB_ENV
        echo "$PYTHON_LOC" >> $GITHUB_PATH

    - name: Update pip and wheel
      shell: bash
      run: python -m pip install --upgrade pip wheel

    - name: Drop pytorch on x86
      shell: bash
      run: |
        echo > env_constraints.txt
        if [ $(python -c 'import struct; print(struct.calcsize("P") * 8)') == 32 ]; then
          sed -i /torch/d requirements.txt
          sed -i /modeci_mdf/d requirements.txt
          # pywinpty is a transitive dependency and v1.0+ removed support for x86 wheels
          echo "pywinpty<1" >> env_constraints.txt
          # jupyter_server >= 2 pulls jupyter_server_terminals which depends on in pywinpty >= 2.0.3
          echo "jupyter_server<2" >> env_constraints.txt
          # scipy >=1.9.2 doesn't provide win32 wheel and GA doesn't have working fortran on windows
          echo "scipy<1.9.2" >> env_constraints.txt
          # scikit-learn >= 1.1.3 doesn't provide win32 wheel
          echo "scikit-learn<1.1.3" >> env_constraints.txt
          # countourpy >=1.1.0 doesn't provide win32 wheel
          echo "contourpy<1.1.0" >> env_constraints.txt
          # pillow >= 10.0.0 doesn't provide win32 wheel
          echo "pillow < 10.0.0" >> env_constraints.txt
          # pandas >= 2.1.0 doesn't provide win32 wheel
          echo "pandas < 2.1.0" >> env_constraints.txt
          # llvmlite >= 0.42.0 doesn't provide win32 wheel
          echo "llvmlite < 0.42.0" >> env_constraints.txt
          # matplotlib >=3.8.0 doesn't provide win32 wheel
          echo "matplotlib < 3.8.0" >> env_constraints.txt
        fi

    - name: Install updated package
      if: ${{ startsWith(github.head_ref, 'dependabot/pip') && matrix.pnl-version != 'base' }}
      shell: bash
      id: new_package
      run: |
        # The branch name pattern is: "dependabot/pip/$TARGET/$PACKAGE{-gt-$MINVERSION,,}{-lt-$MAXVERSION,}{-$VERSION,}
        # The expression below extracts just the $PACKAGE part
        export NEW_PACKAGE=$(echo '${{ github.head_ref }}' | cut -f 4 -d/ | sed 's/-gt.*//' | sed 's/-lt.*//' | sed 's/-[0-9\.]*$//' )
        if grep "$NEW_PACKAGE" *requirements.txt; then 
          echo "new_package=$NEW_PACKAGE" >> $GITHUB_OUTPUT
          # save a list of all installed packages (including pip, wheel; it's never empty)
          pip freeze --all > orig
          pip install "$(echo $NEW_PACKAGE | sed 's/[-_]/./g' | xargs grep *requirements.txt -h -e | head -n1)" -c env_constraints.txt -c broken_trans_deps.txt
          pip show "$NEW_PACKAGE" | grep 'Version' | tee new_version.deps
          # uninstall new packages but skip those from previous steps (pywinpty, terminado on windows x86)
          # the 'orig' list is not empty (includes at least pip, wheel)
          pip uninstall -y $(pip freeze -r orig | sed '1,/## /d')
        else
          echo "new_package=''" >> $GITHUB_OUTPUT
        fi

    - name: Build dist
      id: dist
      shell: bash
      run: |
        pip install setuptools wheel
        python setup.py sdist bdist_wheel
        echo "wheel=$(ls dist/*.whl)" | tee -a "$GITHUB_OUTPUT"
        echo "sdist=$(ls dist/*.sdist)" | tee -a "$GITHUB_OUTPUT"

    - name: Python dependencies
      shell: bash
      run: |
        pip install ${{ steps.dist.outputs.wheel }}[${{ inputs.features }}] -c env_constraints.txt -c broken_trans_deps.txt

    - name: Cleanup old wheels
      shell: bash
      run: |
        pip cache info
        INSTALLED=`pip list | sed 's/-/_/g' | sed 's/  */-/' | tail -n+3`
        CACHED=`pip cache list | cut -f 2,3 -d- | tail -n+3`
        for P in $CACHED; do
          # Remove cached and not installed
          if [ `echo $INSTALLED | grep -o $P | wc -l` == "0" ] ; then
            pip cache remove -v $P || true
          fi
        done

    - name: Check updated package
      if: ${{ startsWith(github.head_ref, 'dependabot/pip') && matrix.pnl-version != 'base' && steps.new_package.outputs.new_package != '' }}
      shell: bash
      run: |
        if [ $(pip list | grep -o ${{ steps.new_package.outputs.new_package }} | wc -l) != "0" ] ; then
          pip show ${{ steps.new_package.outputs.new_package }} | grep 'Version' | tee installed_version.deps
          cmp -s new_version.deps installed_version.deps || echo "::error::Package version restricted by dependencies: ${{ steps.new_package.outputs.new_package }}"
          diff new_version.deps installed_version.deps
        fi
